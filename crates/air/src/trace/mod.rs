pub mod config;
pub mod decommit;

use serde::{Deserialize, Serialize};
use serde_with::serde_as;
use starknet_crypto::Felt;

// Commitment values for the Traces component. Used to generate a commitment by "reading" these
// values from the channel.
#[serde_as]
#[derive(Debug, Clone, Copy, Default, PartialEq, Serialize, Deserialize)]
pub struct UnsentCommitment {
    #[cfg_attr(
        feature = "std",
        serde_as(as = "starknet_core::serde::unsigned_field_element::UfeHex")
    )]
    pub original: Felt,
    #[cfg_attr(
        feature = "std",
        serde_as(as = "starknet_core::serde::unsigned_field_element::UfeHex")
    )]
    pub interaction: Felt,
}

// Commitment for the Traces component.
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct Commitment<InteractionElements> {
    // Commitment to the first trace.
    pub original: swiftness_commitment::table::types::Commitment,
    // The interaction elements that were sent to the prover after the first trace commitment (e.g.
    // memory interaction).
    pub interaction_elements: InteractionElements,
    // Commitment to the second (interaction) trace.
    pub interaction: swiftness_commitment::table::types::Commitment,
}

// Responses for queries to the AIR commitment.
// The queries are usually generated by the next component down the line (e.g. FRI).
#[derive(Debug, Clone, Copy, Default, PartialEq, Serialize, Deserialize)]
pub struct Decommitment {
    // Responses for queries to the original trace.
    pub original: swiftness_commitment::table::types::Decommitment,
    // Responses for queries to the interaction trace.
    pub interaction: swiftness_commitment::table::types::Decommitment,
}

// A witness for a decommitment of the AIR traces over queries.
#[derive(Debug, Default, Clone, Copy, PartialEq, Serialize, Deserialize)]
pub struct Witness {
    pub original: swiftness_commitment::table::types::Witness,
    pub interaction: swiftness_commitment::table::types::Witness,
}
